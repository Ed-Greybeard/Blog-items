/*
Import Bookmark by Sector
Takes a list of sectors from a text file and bookmarks them
Format is:
[BOOKMARK]<sector>,<offset>,<length>

Allows user to specify import file and bookmark folder name

By Greybeard 2012
*/
class MainClass {

  //-------------------------------------------------------------
  // Global Variables
  //-------------------------------------------------------------

  String                                        ScriptName,
                                                BookmarkFolderName;
  BookmarkFolderClass                           Folder;
  BookmarkFolderClass                           SubFolder;
  //-------------------------------------------------------------
  // Main
  //-------------------------------------------------------------

  void Main(CaseClass c) {
    SystemClass::ClearConsole(1);
    ScriptName = "Bookmark Sector";
    // if we have a case open..
    if (c)
    {

      // .. and the case has evidence..
      if (c.EntryRoot().FirstChild())
      {
        // box title
        String boxTitle = "Create Bookmarks from Sector List";
        // default box text
        String fileName(String::Format("{0}\\sectors.txt", c.ExportFolder()));
        // form input title
        String formTitle = "File containing the list of sectors:";

        DialogClass dialog(null, boxTitle);

        StringEditClass stringEdit(dialog,                          // parent WindowClass object
                                   formTitle,                       // form name
                                   WindowClass::START,              // x position (left co-ord)
                                   WindowClass::START,              // y position (top co-ord)
                                   200,                             // width
                                   WindowClass::DEFAULT,            // height
                                   0,                               // box style
                                   fileName,                        // default text
                                   -1,                              // maximum text length (-1 is "no limit")
                                   WindowClass::REQUIRED | WindowClass::FILEOPEN); // WindowClass::FILEOPEN gives the file open option

        // bookmark folder input title
        String bookmarkFormTitle = "Name of bookmark folder to create:";
        // Bookmark folder default name
        String folderName = "Imported Bookmarks";
        StringEditClass bookmkEdit(dialog,                          // parent WindowClass object
                                   bookmarkFormTitle,               // form name
                                   WindowClass::START,              // x position (left co-ord)
                                   30,              // y position (top co-ord)
                                   200,                             // width
                                   WindowClass::DEFAULT,            // height
                                   0,                               // box style
                                   folderName,                        // default text
                                   -1,                              // maximum text length (-1 is "no limit")
                                   0); // WindowClass::FILEOPEN gives the file open option



        // execute the box
        if (dialog.Execute() != SystemClass::OK)
        {
          // if anything other than "OK" is clicked, then exit
          Log("Script Cancelled");
          SystemClass::Exit(1);
        }


        // init LFC for our inputfile
        LocalFileClass input();

        // init EFC for our sector selections!
        EntryFileClass efc();

        if (input.Open(fileName, FileClass::TEXTCRLF))
        {
          Log(String::Format("Input file opened successfully: {0}", fileName));

          BookmarkFolderName = String::Format("{0} - {1}", ScriptName, folderName);
          Folder = new BookmarkFolderClass(c.BookmarkRoot(), BookmarkFolderName);

          String line();

          while (input.ReadString(line, -1, "\r\n") && line)
          {
            // check we are looking at a [BOOKMARK] line
            if (line.SubString(0, 10) == "[BOOKMARK]") {
              // log that we are processing each line
              Log(String::Format("Processing {0}..", line));

              // get sectorvalue from the line
              // note that it is a LONG as we need it to be used to access a sector in our DeviceClass
              // long bkmkSector = long::Convert(line);

              // figure out sector field value and set bkmkSector var
              int lenSectVal = line.Find(",") - 10;
              long bkmkSector = long::Convert(line.SubString(10, lenSectVal));
              Log(String::Format("\t\tSector:{0}", bkmkSector));

              // figure out offset field and set bkmkOffset var
              int startSectOff = line.Find(",") + 1;
              int endSectOff = line.Find(",", (startSectOff+1));
              int lenSectOff = endSectOff - startSectOff;
              uint bkmkOffset = uint::Convert(line.SubString(startSectOff, lenSectOff));
              Log(String::Format("\t\tOffset:{0}", bkmkOffset));

              // figure out length field and set bkmkLen var
              int startLen = endSectOff + 1;
              uint bkmkLen = uint::Convert(line.SubString(startLen));
              Log(String::Format("\t\tLength:{0}", bkmkLen));

              foreach (DeviceClass dev in c.DeviceRoot())
              {
                EntryClass e;
                long fileOffset;

                e = dev.GetEntry (bkmkSector, bkmkOffset, fileOffset);

                // open offset as an EntryFileClass ready for bookmarking
                efc.Open(e);

               Folder.AddBookmark(e,
                                  fileOffset,                           // offset
                                  bkmkLen,                              // size
                                  "Sector " + bkmkSector,               // Comment
                                  BookmarkClass::SHOWPICTURE,           // Options
                                  BookmarkClass::PICTURE);              // Viewtypes */
                Log("Done");

              } // endforeach (DeviceClass dev in c.DeviceRoot())

            } // endif
          } //endwhile (input.ReadString(line, -1, "\r\n") && line)
        } // endif (input.Open(fileName, FileClass::TEXTCRLF))
        else
        {
          Log(String::Format("Unable to open file: {0}", fileName));
          SystemClass::Exit(1);
        }
      } // endif (c.EntryRoot().FirstChild())
      else
      {
        Log("No evidence!");
      }
    } // endif (c)
    else
    {
      Log("No case!");
    }
  } // End MAIN


  //-------------------------------------------------------------
  // Log
  //-------------------------------------------------------------

  void Log(const String &message)
  {
    DateClass date();
    date.Now();
    Console.WriteLine("[{0}] [{1}] {2}", date.GetString(), ScriptName, message);
  }

} // End Class MainClass
