/*
Export Bookmark by Sector
Takes a list of selected bookmarks and exports them based on sector and fileoffset
Format is:
[BOOKMARK]<sector>,<offset>,<length>

By Greybeard 2012
*/
class MainClass {

  //-------------------------------------------------------------
  // Global Variables
  //-------------------------------------------------------------

  String                                        ScriptName,
                                                BookmarkFolderName;
  BookmarkFolderClass                           Folder;
  BookmarkFolderClass                           SubFolder;
  //-------------------------------------------------------------
  // Main
  //-------------------------------------------------------------

  void Main(CaseClass c) {
    SystemClass::ClearConsole(1);
    ScriptName = "Export Bookmark by Sector";

    // if we have a case open..
    if (!c)
    {
      Log("No case!");
      SystemClass::Exit(1);
    }


    // .. and the case has evidence..
    if (!c.EntryRoot().FirstChild())
    {
      Log("No evidence!");
      SystemClass::Exit(1);
    }

    // box title
    String boxTitle = "Export list of sectors and offsets from Bookmarks";
    // default box text
    String fileName(String::Format("{0}\\sectors.txt", c.ExportFolder()));
    // form input title
    String formTitle = "Export to the following file:";

    DialogClass dialog(null, boxTitle);
    StringEditClass stringEdit(dialog,                          // parent WindowClass object
                               formTitle,                       // form name
                               WindowClass::START,              // x position (left co-ord)
                               WindowClass::START,              // y position (top co-ord)
                               200,                             // width
                               WindowClass::DEFAULT,            // height
                               0,                               // box style
                               fileName,                        // default text
                               -1,                              // maximum text length (-1 is "no limit")
                               WindowClass::REQUIRED | WindowClass::FILECREATE); // WindowClass::FILEOPEN gives the file open option


    // execute the box
    if (dialog.Execute() != SystemClass::OK)
    {
      // if anything other than "OK" is clicked, then exit
      Log("Script Cancelled");
      SystemClass::Exit(1);
    }

    // init LFC for our outputfile
    LocalFileClass output();

    // init EFC for our sector selections!
    EntryFileClass efc();

    // attempt to open output file
    if (output.Open(fileName, FileClass::TEXTCRLF|FileClass::WRITE))
    {
      Log(String::Format("Output file opened successfully: {0}", fileName));
    } // endif (input.Open(fileName, FileClass::TEXTCRLF))
    else
    {
      Log(String::Format("Unable to open file: {0}", fileName));
      SystemClass::Exit(1);
    }

    // Generate the first line of the output file
    // (which just shows case attributes)

    DateClass d();
    d.Now();
    String headerString = String::Format("Evidence File: {0}\nDate created: {1}\n", c.Name(), d.GetString());
    output.Write(headerString);

    forall (BookmarkClass b in c.BookmarkRoot())
    {
      if (b.IsSelected())
      {
        ulong bOffset = (b.Start() - b.PhysicalLocation()) % 512;
        String outputString() = String::Format("[BOOKMARK]{0},{1},{2}\n", b.StartSector(), bOffset, b.Length());
        Log(outputString);
        output.Write(outputString);
      } // end if (b.Notable())
    } // end for BookmarkClass b in c.BookmarkRoot()

    output.Close();

  } // End MAIN


  //-------------------------------------------------------------
  // Log
  //-------------------------------------------------------------

  void Log(const String &message)
  {
    DateClass date();
    date.Now();
    Console.WriteLine("[{0}] [{1}] {2}", date.GetString(), ScriptName, message);
  }

} // End Class MainClass
